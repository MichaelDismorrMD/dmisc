% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kipouro_functions.R
\name{regstand_cr}
\alias{regstand_cr}
\title{Obtain regression standardized cumulative incidence while
accounting for the competing risk of death.}
\usage{
regstand_cr(
  data,
  exposure,
  outcome_mod = NA,
  death_mod = NA,
  maxt = NA,
  fragm = NA
)
}
\arguments{
\item{data}{The dataframe used to generate the models.}

\item{exposure}{The column with the variable of interest. Should be a factor.}

\item{outcome_mod}{A \code{mexhaz} mod with the outcome of interest.}

\item{death_mod}{A \code{mexhaz} model with death as outcome.}

\item{maxt}{Max follow-up time in year to do predictions on.}

\item{fragm}{How many splits that should be made from 0 to maxt}
}
\value{
A list containing the following
\itemize{
\item A dataframe with the estimates that can be used for plotting
\item Lists for each level of \code{exposure} resulting from a call to \code{predict_prob()}
}
}
\description{
Using methodology described in https://doi.org/10.1002/sim.8209.
Building upon code by Dr. Dimitra-Kleio Kipourou.
}
\examples{
# We will use the pbc dataset from the `survival` package

pbc <- survival::pbc \%>\% dplyr::mutate(time_years = time / 365.241) \%>\%
 dplyr::select(time_years, status, sex, age, albumin)

kts <- quantile(pbc$time_years, probs=c(1/3,2/3)) # Knot positions for the baseline hazard

maxt <- floor(max(pbc$time_years)) # Analyze up to maximum years

fragm <- maxt * 4 # Analyze at each quarter of follow-up

outcome_mod <- mexhaz::mexhaz(Surv(time_years, status == 1) ~ sex + age + albumin,
                             data = pbc,
                             base = "exp.bs",
                             degree = 3,
                             knots = kts,
                             verbose = 0,
                             print.level = 0)

death_mod <- mexhaz::mexhaz(Surv(time_years, status == 2) ~ sex + age + albumin,
                           data = pbc,
                           base = "exp.bs",
                           degree = 3,
                           knots = kts,
                           verbose = 0,
                           print.level = 0)

# Set number of cores to be used by the cores argument

# n_cores <- parallel::detectCores() - 1

doParallel::registerDoParallel(cores = 2) # Or use n_cores here

results <- regstand_result <- regstand_cr(pbc, sex, outcome_mod, death_mod, maxt, fragm)

doParallel::stopImplicitCluster()
}
